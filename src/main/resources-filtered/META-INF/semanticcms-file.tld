<?xml version="1.0" encoding="UTF-8"?>
<!--
semanticcms-file-taglib - Files nested within SemanticCMS pages and elements in a JSP environment.
Copyright (C) 2013, 2014, 2015, 2016, 2017, 2019, 2020, 2021  AO Industries, Inc.
	support@aoindustries.com
	7262 Bull Pen Cir
	Mobile, AL 36695

This file is part of semanticcms-file-taglib.

semanticcms-file-taglib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

semanticcms-file-taglib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with semanticcms-file-taglib.  If not, see <https://www.gnu.org/licenses/>.
-->
<taglib xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
	version="2.1">
	<!-- datePublished="2016-08-17T15:17:17-05:00" -->
	<!-- dateModified="2016-11-11T14:18:26-06:00" -->
	<description><![CDATA[
		<p>@{description.html}</p>
	]]></description>
	<display-name>@{project.name}</display-name>
	<tlib-version>
		<!-- Release: @{project.version} -->
		@{parsedVersion.majorVersion}.@{parsedVersion.minorVersion}.@{parsedVersion.incrementalVersion}
	</tlib-version>
	<short-name>file</short-name>
	<uri>@{project.url}</uri>
	<tag>
		<!-- datePublished="2016-08-17T15:17:17-05:00" -->
		<!-- dateModified="2021-06-16T13:20:50-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Writes a link to a file.
				Supports optional <a href="https://semanticcms.com/openfile/servlet/">desktop integration mode</a>.
			</p>
			<p>
				If <a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a>
				is enabled, the connection is from localhost, and not exporting,
				creates a <code>file:///â€¦</code> URL to the file so that it may be opened locally by the browser.
				Will additionally open from the server-side when JavaScript enabled.
			</p>
			<p>
				If there is no body, will write the filename followed by the file size.
			</p>
			<p>
				<a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a>
				must be explicitly enabled by setting the <code>com.semanticcms.openfile.servlet.OpenFile.enabled</code>
				context parameter to <code>true</code>.
			</p>
			<p>
				For security, <a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a>
				may only be called from localhost.  However, be careful when behind a proxy,
				as external proxied requests can appear to come from localhost.
			</p>
			<p>
				<a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a> may be enabled for development but disabled
				in production by selectively including the <a href="https://semanticcms.com/openfile/servlet/">semanticcms-openfile-servlet</a>
				dependency by profile.  By not including the dependency in production builds, the code is not simply disabled, but is not even included in production.
			</p>
			<p>
				The onclick AJAX file opening is disabled when the documents are exporting,
				as set by the <code>X-com-semanticcms-core-exporting: true</code> header.
			</p>
		]]></description>
		<name>file</name>
		<tag-class>com.semanticcms.file.taglib.FileTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description><![CDATA[
				<p>
					The id used in URL anchors.
					If not provided, is generated from the label.
					Must be unique per page.
					Ids generated from labels will be unique, but may change as page structure changes.
				</p>
			]]></description>
			<name>id</name>
			<required>false</required>
			<deferred-value>
				<type>java.lang.String</type>
			</deferred-value>
		</attribute>
		<attribute>
			<description><![CDATA[
				<p>
					The domain of the book containing the file.
					Defaults to the domain of the current JSP file.
				</p>
			]]></description>
			<name>domain</name>
			<required>false</required>
			<deferred-value>
				<type>java.lang.String</type>
			</deferred-value>
		</attribute>
		<attribute>
			<description><![CDATA[
				<p>
					The book containing the file.
					Defaults to the book of the current JSP file.
				</p>
			]]></description>
			<name>book</name>
			<required>false</required>
			<deferred-value>
				<type>java.lang.String</type>
			</deferred-value>
		</attribute>
		<attribute>
			<description><![CDATA[
				<p>
					The page-relative path to the file.
				</p>
			]]></description>
			<name>path</name>
			<required>true</required>
			<deferred-value>
				<type>java.lang.String</type>
			</deferred-value>
		</attribute>
		<attribute>
			<description><![CDATA[
				<p>
					When <code>true</code>, the file is displayed on the page but not added to the list of files on the page.
					Defaults to <code>false</code>.
				</p>
			]]></description>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>boolean</type>
		</attribute>
		<dynamic-attributes>true</dynamic-attributes>
	</tag>
	<function>
		<!-- datePublished="2016-08-17T16:02:29-05:00" -->
		<!-- dateModified="2016-11-08T02:37:18-06:00" -->
		<description><![CDATA[
			<p>
				Checks if the given page, or optionally any of its child pages, has at least
				one not-hidden File.
			</p>
		]]></description>
		<name>hasFile</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>boolean hasFile(com.semanticcms.core.model.Page,boolean)</function-signature>
		<example><![CDATA[<code>${file:hasFile(page, recursive)}</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2016-10-16T19:01:01-05:00" -->
		<!-- dateModified="2021-06-16T13:20:50-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Determines if local file opening is allowed.
			</p>
			<p>
				Uses reflection to avoid hard dependency on <a href="https://semanticcms.com/openfile/servlet/">semanticcms-openfile-servlet</a>.
			</p>
			<p>
				<a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a>
				must be explicitly enabled by setting the <code>com.semanticcms.openfile.servlet.OpenFile.enabled</code>
				context parameter to <code>true</code>.
			</p>
			<p>
				For security, <a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a>
				may only be called from localhost.  However, be careful when behind a proxy,
				as external proxied requests can appear to come from localhost.
			</p>
			<p>
				<a href="https://semanticcms.com/openfile/servlet/apidocs/com.semanticcms.openfile.servlet/com/semanticcms/openfile/servlet/OpenFile.html">OpenFile</a> may be enabled for development but disabled
				in production by selectively including the <a href="https://semanticcms.com/openfile/servlet/">semanticcms-openfile-servlet</a>
				dependency by profile.  By not including the dependency in production builds, the code is not simply disabled, but is not even included in production.
			</p>
		]]></description>
		<name>isOpenFileAllowed</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>boolean isOpenFileAllowed()</function-signature>
		<example><![CDATA[<code>${file:isOpenFileAllowed()}</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2017-08-03T11:04:44-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a domain, book, and book-relative path.
			</p>
			<p>
				Parameter "domain": The domain of the book containing the file.
			</p>
			<p>
				Parameter "book": The name of the book containing the file.
			</p>
			<p>
				Parameter "path": The book-relative path to the file,
				must begin with a slash <code>/</code>.
			</p>
			<p>
				Parameter "require": When <code>true</code>, the file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.  When <code>false</code>, the returned
				file will be <code>null</code> when the book is inaccessible, the resource store is unavailable,
				or the resource is not a local file, and the returned file might not exist.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResourceInDomain">${core:getResourceInDomain()}</a>.
			</p>
			<p>
				When requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getExeFileInDomain">${file:getExeFileInDomain()}</a>.
			</p>
		]]></description>
		<name>getFileInDomain</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getFileInDomain(java.lang.String,java.lang.String,java.lang.String,boolean)</function-signature>
		<example><![CDATA[<code>${file:getFileInDomain(domain, book, path, require)</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2016-08-07T23:48:25-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a book and book-relative path in the domain of the current JSP file.
			</p>
			<p>
				Parameter "book": The name of the book containing the file.
			</p>
			<p>
				Parameter "path": The book-relative path to the file,
				must begin with a slash <code>/</code>.
			</p>
			<p>
				Parameter "require": When <code>true</code>, the file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.  When <code>false</code>, the returned
				file will be <code>null</code> when the book is inaccessible, the resource store is unavailable,
				or the resource is not a local file, and the returned file might not exist.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResourceInBook">${core:getResourceInBook()}</a>.
			</p>
			<p>
				When requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getExeFileInBook">${file:getExeFileInBook()}</a>.
			</p>
		]]></description>
		<name>getFileInBook</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getFileInBook(java.lang.String,java.lang.String,boolean)</function-signature>
		<example><![CDATA[<code>${file:getFileInBook(book, path, require)</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2016-08-07T23:48:25-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a page-relative path in the domain and book of the current JSP file.
			</p>
			<p>
				Parameter "path": The page-relative path to the file;
				book-relative when begins with a slash <code>/</code>.
			</p>
			<p>
				Parameter "require": When <code>true</code>, the file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.  When <code>false</code>, the returned
				file will be <code>null</code> when the book is inaccessible, the resource store is unavailable,
				or the resource is not a local file, and the returned file might not exist.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResource">${core:getResource()}</a>.
			</p>
			<p>
				When requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getExeFile">${file:getExeFile()}</a>.
			</p>
		]]></description>
		<name>getFile</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getFile(java.lang.String,boolean)</function-signature>
		<example><![CDATA[<code>${file:getFile(path, require)</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2017-08-03T11:04:44-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a domain, book, and book-relative path
				while making sure it is set <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>.
			</p>
			<p>
				Parameter "domain": The domain of the book containing the file.
			</p>
			<p>
				Parameter "book": The name of the book containing the file.
			</p>
			<p>
				Parameter "path": The book-relative path to the file,
				must begin with a slash <code>/</code>.
			</p>
			<p>
				The file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.
			</p>
			<p>
				The file will be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>;
				an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/IOException.html">IOException</a>
				will be thrown if the file cannot be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#setExecutable(boolean)">set executable</a>.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResourceInDomain">${core:getResourceInDomain()}</a>.
			</p>
			<p>
				When not requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getFileInDomain">${file:getFileInDomain()}</a>.
			</p>
		]]></description>
		<name>getExeFileInDomain</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getExeFileInDomain(java.lang.String,java.lang.String,java.lang.String)</function-signature>
		<example><![CDATA[<code>${file:getExeFileInDomain(domain, book, path)}</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2016-08-07T23:48:25-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a book and book-relative path in the domain of the current JSP file
				while making sure it is set <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>.
			</p>
			<p>
				Parameter "book": The name of the book containing the file.
			</p>
			<p>
				Parameter "path": The book-relative path to the file,
				must begin with a slash <code>/</code>.
			</p>
			<p>
				The file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.
			</p>
			<p>
				The file will be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>;
				an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/IOException.html">IOException</a>
				will be thrown if the file cannot be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#setExecutable(boolean)">set executable</a>.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResourceInBook">${core:getResourceInBook()}</a>.
			</p>
			<p>
				When not requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getFileInBook">${file:getFileInBook()}</a>.
			</p>
		]]></description>
		<name>getExeFileInBook</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getExeFileInBook(java.lang.String,java.lang.String)</function-signature>
		<example><![CDATA[<code>${file:getExeFileInBook(book, path)}</code>]]></example>
	</function>
	<function>
		<!-- datePublished="2016-08-07T23:48:25-05:00" -->
		<!-- dateModified="2021-06-16T14:18:10-05:00" -->
		<description><![CDATA[
			<p class="semanticcms-tag-reference-summary">
				Gets the local file for a page-relative path in the domain and book of the current JSP file
				while making sure it is set <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>.
			</p>
			<p>
				Parameter "path": The page-relative path to the file;
				book-relative when begins with a slash <code>/</code>.
			</p>
			<p>
				The file will be non-null and will exist;
				a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/FileNotFoundException.html">FileNotFoundException</a>
				will be thrown if the book is inaccessible, the resource store is unavailable, the resource
				is not a local file, or the resource does not exist.
			</p>
			<p>
				The file will be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a>;
				an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/IOException.html">IOException</a>
				will be thrown if the file cannot be <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#setExecutable(boolean)">set executable</a>.
			</p>
			<p>
				When not requiring a <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html">File</a>, which is less portable,
				use <a href="https://semanticcms.com/core/taglib/semanticcms-core.tld/function-getResource">${core:getResource()}</a>.
			</p>
			<p>
				When not requiring an <a rel="nofollow" href="@{javadoc.link.javase}java.base/java/io/File.html#canExecute()">executable</a> file,
				use <a href="@{project.url}semanticcms-file.tld/function-getFile">${file:getFile()}</a>.
			</p>
		]]></description>
		<name>getExeFile</name>
		<function-class>com.semanticcms.file.taglib.Functions</function-class>
		<function-signature>java.io.File getExeFile(java.lang.String)</function-signature>
		<example><![CDATA[<code>${file:getExeFile(path)}</code>]]></example>
	</function>
</taglib>
